System: BussardRamjet
	Name: #SS_RAMJET_NAME
	Description: #SS_RAMJET_DESC
	Appearance: BussardRamjet
	Explosion: subsystem_destroyed
	
	Tags: Engine
	Tied To: ParticlePhysics 1, Engines 1

	Available: (Techs.ParticlePhysics.Level > 0) && (Techs.Engines.Level > 0)
	Level: floor((Techs.ParticlePhysics.Level + Techs.Engines.Level) / 2)
	Size: max(Scale, 1)							//was Scale *2
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 50 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 50 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)
	
	Costs: Metals[150 * Size * pow(SUBS_COST_CRV, Level)], Electronics[10 * Size * pow(SUBS_COST_CRV, Level)], AdvParts[10 * Size * pow(SUBS_COST_CRV, Level)], Labr[5 * Size]
	Complexity: 1.2
	
	vThrust: Size * 200 * (2 - decay(pow(LEVEL_GAIN_CURVE,Level),35)) * min(((sqrt(1 + Size) / 20) + 1), 3) * GAME_THRUST_MULT
	
	Provides: Propulsion with
		Amount[vThrust]

			//Consumes:
				//To Run: Power[10 * Size]
	
	Hints: Thrust[vThrust]

System: Thruster
	Name: #SS_THRUSTER_NAME
	Description: #SS_THRUSTER_DESC
	Appearance: ThrusterRocket
	Explosion: subsystem_destroyed
	
	Tags: Engine
	Tied To: Engines 1

	Available: Techs.Engines.Level > 0
	Level: Techs.Engines.Level
	Size: Scale
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 50 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 50 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)
	
	Costs: Metals[200 * progress(Size, 0.05, Level) * pow(SUBS_COST_CRV, Level)], Electronics[15 * progress(Size, 0.05, Level) * pow(SUBS_COST_CRV, Level)], AdvParts[100 * progress(Size, 0.05, Level) * pow(SUBS_COST_CRV, Level)], Labr[5 * Size], Fuel[Size * 10]
	Complexity: 0.4
	
	vThrust: Size * 600 * (2 - decay(pow(LEVEL_GAIN_CURVE,Level),35)) * GAME_THRUST_MULT
	vEfficieny: 0.00018 * decay(pow(LEVEL_GAIN_CURVE,Level),35)
	
	Provides: FuelStorage with
		Amount[Size * 10]

	Provides: FuelThrust with
		Amount[vThrust], 
		Efficiency[vEfficieny]
	
	Requires:
		To Run: Control[5 * Size]
	
	Hints: Thrust[vThrust], FuelUse[vEfficieny * vThrust * -1], Fuel[Size * 10]


System: IonThruster
	Name: #SS_IONTHRUSTER_NAME
	Description: #SS_IONTHRUSTER_DESC
	Appearance: ThrusterIon
	Explosion: subsystem_destroyed
	
	Tags: Engine
	Tied To: Engines 5, EnergyPhysics 5

	Available: (Techs.Engines.Level > 4) && (Techs.EnergyPhysics.Level > 4) || Traits.remnants
	Level: floor(weight(Techs.Engines.Level, 0.5, Techs.EnergyPhysics.Level, 0.5))
	Size: Scale
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 50 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 50 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)
	
	Costs: Metals[200 * progress(Size, 0.05, Level) * pow(SUBS_COST_CRV, Level)], Electronics[15 * progress(Size, 0.05, Level) * pow(SUBS_COST_CRV, Level)], AdvParts[100 * progress(Size, 0.05, Level) * pow(SUBS_COST_CRV, Level)], Labr[5 * Size], Fuel[Size * 10]
	Complexity: 0.5
	
	vThrust: Size * 560 * (2 - decay(pow(LEVEL_GAIN_CURVE,Level),35)) * GAME_THRUST_MULT		//was 700
	vEfficieny: 0.000036 * decay(pow(LEVEL_GAIN_CURVE,Level),35)
	vPowCost: 10 * decay(pow(LEVEL_GAIN_CURVE,Level),35) * Size
	
	Provides: FuelStorage with
		Amount[Size * 10]

	Provides: IonThrust with
		Amount[vThrust],
		Efficiency[vEfficieny], //Scales with size because effective thrust is inversely scaled to psuedo-account for mass
		PowCost[vPowCost]
	
	Requires:
		To Run: Control[5 * Size]
	
	Hints: Thrust[vThrust], Power[vPowCost * -1], FuelUse[vEfficieny * vThrust * -1], Fuel[Size * 10]

System: PolypropellantThruster
	Name: #SS_POLYPROPTHRUST_NAME
	Description: #SS_POLYPROPTHRUST_DESC
	Appearance: PolypropellantThruster
	Explosion: subsystem_destroyed
	
	Tags: Engine
	Tied To: Engines 3

	Available: Techs.Engines.Level > 2
	Level: Techs.Engines.Level
	Size: Scale
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 25 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 50 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)
	
	Costs: Metals[300 * progress(Size, 0.05, Level) * pow(SUBS_COST_CRV, Level)], Electronics[15 * progress(Size, 0.05, Level) * pow(SUBS_COST_CRV, Level)], AdvParts[100 * progress(Size, 0.05, Level) * pow(SUBS_COST_CRV, Level)], Labr[5 * Size], Fuel[Size * 10]
	Complexity: 0.6
	
	vThrust: Size * 900 * (2 - decay(pow(LEVEL_GAIN_CURVE,Level),35)) * GAME_THRUST_MULT
	vEfficieny: 0.00036 * decay(pow(LEVEL_GAIN_CURVE,Level),35)
	
	Provides: FuelStorage with
		Amount[Size * 10]

	Provides: FuelThrust with
		Amount[vThrust], 
		Efficiency[vEfficieny]
	
	Requires:
		To Run: Control[6 * Size]
	
	Hints: Thrust[vThrust], FuelUse[vEfficieny * vThrust * -1], Fuel[Size * 10]


System: MagnetoPlasmaThruster
	Name: #SS_MAGPLASTHRUST_NAME
	Description: #SS_MAGPLASTHRUST_DESC
	Appearance: MPDThruster
	Explosion: subsystem_destroyed
	
	Tags: Engine
	Tied To: Engines 7, EnergyPhysics 7

	Available: ((Techs.Engines.Level > 6) && (Techs.EnergyPhysics.Level > 6)) || Traits.remnants
	Level: floor(weight(Techs.Engines.Level, 0.5, Techs.EnergyPhysics.Level, 0.5))
	Size: Scale
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 50 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 50 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)
	
	Costs: Metals[150 * progress(Size, 0.05, Level) * pow(SUBS_COST_CRV, Level)], Electronics[20 * progress(Size, 0.05, Level) * pow(SUBS_COST_CRV, Level)], AdvParts[150 * progress(Size, 0.05, Level) * pow(SUBS_COST_CRV, Level)], Labr[5 * Size], Fuel[Size * 10]
	Complexity: 0.8
	
	vThrust: Size * 650 * (2 - decay(pow(LEVEL_GAIN_CURVE,Level),35)) * GAME_THRUST_MULT
	vEfficieny: 0.000054 * decay(pow(LEVEL_GAIN_CURVE,Level),35)
	vPowCost: 30 * decay(pow(LEVEL_GAIN_CURVE,Level),35) * Size
	
	Provides: FuelStorage with
		Amount[Size * 10]

	Provides: IonThrust with
		Amount[vThrust],
		Efficiency[vEfficieny], //Scales with size because effective thrust is inversely scaled to psuedo-account for mass
		PowCost[vPowCost]
	
	Requires:
		To Run: Control[8 * Size]
	
	Hints: Thrust[vThrust], Power[vPowCost * -1], FuelUse[vEfficieny * vThrust * -1], Fuel[Size * 10]


System: VASIMRThruster
	Name: #SS_VASIMRTHRUST_NAME
	Description: #SS_VASIMRTHRUST_DESC
	Appearance: VASIMR
	Explosion: subsystem_destroyed
	
	Tags: Engine
	Tied To: Engines 9, EnergyPhysics 9

	Available: ((Techs.Engines.Level > 8) && (Techs.EnergyPhysics.Level > 8)) || Traits.remnants
	Level: floor(weight(Techs.Engines.Level, 0.5, Techs.EnergyPhysics.Level, 0.5))
	Size: Scale
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 50 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 50 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)
	
	Costs: Metals[100 * progress(Size, 0.05, Level) * pow(SUBS_COST_CRV, Level)], Electronics[30 * progress(Size, 0.05, Level) * pow(SUBS_COST_CRV, Level)], AdvParts[150 * progress(Size, 0.05, Level) * pow(SUBS_COST_CRV, Level)], Labr[5 * Size], Fuel[Size * 10]
	Complexity: 1
	
	vThrust: Size * 820 * (2 - decay(pow(LEVEL_GAIN_CURVE,Level),35)) * GAME_THRUST_MULT
	vEfficieny: 0.000018 * decay(pow(LEVEL_GAIN_CURVE,Level),35)
	vPowCost: 50 * decay(pow(LEVEL_GAIN_CURVE,Level),35) * Size
	
	Provides: FuelStorage with
		Amount[Size * 10]

	Provides: IonThrust with
		Amount[vThrust],
		Efficiency[vEfficieny], //Scales with size because effective thrust is inversely scaled to psuedo-account for mass
		PowCost[vPowCost]
	
	Requires:
		To Run: Control[2 * Size]
	
	Hints: Thrust[vThrust], Power[vPowCost * -1], FuelUse[vEfficieny * vThrust * -1], Fuel[Size * 10]



System: AntimatterRocket
	Name: #SS_ANTIMATENG_NAME
	Description: #SS_ANTIMATENG_DESC
	Appearance: AntimatterRocket
	Explosion: subsystem_destroyed
	
	Tags: Engine
	Tied To: Engines 10, EnergyPhysics 11

	Available: (((Techs.Engines.Level > 9) && (Techs.EnergyPhysics.Level > 10)) || Traits.remnants) && not(Traits.no_antimatter)
	Level: floor(weight(Techs.Engines.Level, 0.5, Techs.EnergyPhysics.Level, 0.5))
	Size: Scale
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 50 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 50 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)
	
	Costs: Metals[50 * progress(Size, 0.05, Level) * pow(SUBS_COST_CRV, Level)], Electronics[25 * progress(Size, 0.05, Level) * pow(SUBS_COST_CRV, Level)], AdvParts[250 * progress(Size, 0.05, Level) * pow(SUBS_COST_CRV, Level)], Labr[5 * Size]
	Complexity: 2
	
	vThrust: Size * 940 * (2 - decay(pow(LEVEL_GAIN_CURVE,Level),35)) * GAME_THRUST_MULT
	vPowCost: 40 * decay(pow(LEVEL_GAIN_CURVE,Level),35) * Size

	Provides: Propulsion with
		Amount[vThrust]
		
	Consumes:
		To Run: Power[vPowCost]

	Requires:
		To Run: Control[4 * Size], AntimatterGeneration[Size * 2]
		
	Hints: Thrust[vThrust]
	
System: JumpDrive
	Name: #SS_JUMPDRIVE_NAME
	Description: #SS_JUMPDRIVE_DESC
	Appearance: Jumpdrive
	Explosion: antimatter_boom_heavy centered lasting 1.0
	
	Tags: JumpDrive, Tool:JumpDrive, TimedReload, Engine
	Tied To: WarpPhysics 5
	
	Available: ((Techs.WarpPhysics.Level > 4) || Traits.start_jumpdrives) && not(Traits.religious)
	realLevel: Techs.WarpPhysics.Level
	Level: if(Traits.start_jumpdrives, max(Techs.WarpPhysics.Level, 3), Techs.WarpPhysics.Level)
	Size: Scale
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 100 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 300 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)
	
	Costs: Metals[250 * Size * pow(SUBS_COST_CRV, Level)], Electronics[250 * Size * pow(SUBS_COST_CRV, Level)], AdvParts[250 * Size * pow(SUBS_COST_CRV, Level)]
	Complexity: 2.5
	
	vJumpRangeMin: 1000 * decay(Level, 250)
	vJumpRange: progress(15000 + (Size * 50),1000 + (Size * 10), pow(LEVEL_GAIN_CURVE, Level)) * sqrt(Scale / Object.Scale)				//was progress(5000 + ...
	vChargeTime: min((10 + (decay(pow(LEVEL_GAIN_CURVE, Level),25) * sqrt(Object.Scale))), 120)
	vPowCost: 100 * Size
	vFuelCost: 20 * Size

	Provides: DestructsShip
	Provides: GAJumpDriveEvent
	Provides: JumpDrive with MinRange[vJumpRangeMin], MaxRange[vJumpRange],
		ChargeupTime[vChargeTime], PowCost[vPowCost], FuelCost[vFuelCost]
		
	Requires:
		To Run:
			Control[50 * Size]
	
	Hints: Power[-1 * vPowCost], Local/ChargeTime[vChargeTime], Local/JumpMinDist[vJumpRangeMin / 1000], Local/JumpMaxDist[vJumpRange / 1000], Local/FuelCost[vFuelCost]