//Keyword: specifies an entry for the current system
//If the keyword isn't an internal keyword, it's treated as a special variable that can be accessed by scripts
//	Note: When the keyword is a user-defined type as above, it must be a valid formula

//Average density is 50 per size unit

System: PowerGen
	Name: #SS_POWERGEN_NAME
	Description: #SS_POWERGEN_DESC
	Appearance: NuclearReactor
	Explosion: subsys_powerexplode lasting 1.25
	
	Tags: Power, ThermalManagement
	Tied To: EnergyPhysics 1

	Available: Techs.EnergyPhysics.Level > 0
	Level: Techs.EnergyPhysics.Level
	Size: Scale
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 50 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 60 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)

	Costs: Metals[200 * Size * pow(SUBS_COST_CRV, Level)], Electronics[10 * Size * pow(SUBS_COST_CRV, Level)], Labr[5 * Size]
	Complexity: 0.7
	
	vGen: Size * 70 * (2 - decay(pow(LEVEL_GAIN_CURVE,Level), 15))		//was decay(()), 12)
	vCost: 0.0066 * decay(pow(LEVEL_GAIN_CURVE,Level), 12) * decay(Size, 30)				//was 0.01
	vHeatsink: Size * 20
	vHeatReleaseRate: Size * 1 * (2 - decay(pow(LEVEL_GAIN_CURVE,Level), 5))

	Provides: Power with
		Rate[vGen],
		Cost[vCost] //Larger power generators tend to be more efficient

	Provides: Capacitance with
		Amount[vGen * 2.5] //Hold 2.5 seconds of power output
		
	Provides: Heatsink with Amount[vHeatsink]
	Provides: ReleaseHeat with Rate[vHeatReleaseRate]

	Requires:
		To Run: Control[2 * Size]
	
	//Multiply by 1.8 to approximate charge rate at 20% of max charge
	Hints: Power[1.8 * vGen], FuelUse[vCost * vGen * -1.8], Charge[vGen * 2.5], Heatsink[vHeatsink], WasteHeat[-1 * vHeatReleaseRate]

System: FusionGen
	Name: #SS_FUSIONGEN_NAME
	Description: #SS_FUSIONGEN_DESC
	Appearance: FusionGenerator
	Explosion: antimatter_boom2 centered lasting 1.0
	
	Tags: Power, ThermalManagement
	Tied To: EnergyPhysics 4

	Available: Techs.EnergyPhysics.Level > 3
	Level: Techs.EnergyPhysics.Level
	Size: Scale
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 100 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 80 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)

	Costs: Metals[200 * Size * pow(SUBS_COST_CRV, Level)], Electronics[100 * Size * pow(SUBS_COST_CRV, Level)], AdvParts[100 * Size * pow(SUBS_COST_CRV, Level)], Labr[5 * Size]
	Complexity: 1.0
	
	vGen: Size * 160 * (2 - decay(pow(LEVEL_GAIN_CURVE,Level), 15))		//was decay(()), 12)
	vCost: 0.002 * decay(pow(LEVEL_GAIN_CURVE,Level), 12) * decay(Size, 30)
	vHeatsink: Size * 30
	vHeatReleaseRate: Size * 1.5 * (2 - decay(pow(LEVEL_GAIN_CURVE,Level), 5))

	Provides: Power with
		Rate[vGen],
		Cost[vCost] //Larger power generators tend to be more efficient

	Provides: Capacitance with
		Amount[vGen * 2.5]
		
	Provides: Heatsink with Amount[vHeatsink]
	Provides: ReleaseHeat with Rate[vHeatReleaseRate]
		
	Provides: ExplodesShip
	
	Triggerable: Detonation: ShipExplosion with Damage[2 * vGen * GAME_DAMAGE_MULT], Accuracy[0.75], Range[sqrt(Size) * 10]

	Requires:
		To Run: Control[5 * Size]
	
	//Multiply by 1.8 to approximate charge rate at 20% of max charge
	Hints: Power[1.8 * vGen], FuelUse[-1.8 * vGen * vCost], Local/SelfDestruct[2 * vGen * GAME_DAMAGE_MULT], Local/NovaRange[sqrt(Size) * 10], Charge[vGen * 2.5], Heatsink[vHeatsink], WasteHeat[-1 * vHeatReleaseRate]

System: AntiMatterGen
	Name: #SS_AMGEN_NAME
	Description: #SS_AMGEN_DESC
	Appearance: AntimatterGenerator
	Explosion: antimatter_boom_heavy centered lasting 1.0
	
	Tags: Power, AntimatterPowered, ThermalManagement
	Tied To: EnergyPhysics 7, Science 4

	Available: (((Techs.EnergyPhysics.Level > 6) && (Techs.Science.Level > 3)) || Traits.remnants) && not(Traits.no_antimatter)
	Level: Techs.EnergyPhysics.Level
	Size: max(1, Scale)
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 30 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 160 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)

	Costs: Metals[200 * Size * pow(SUBS_COST_CRV, Level)], Electronics[200 * Size * pow(SUBS_COST_CRV, Level)], AdvParts[200 * Size * pow(SUBS_COST_CRV, Level)], Labr[5 * Size]
	Complexity: 2.25
	
	vGen: Size * 480 * (2 - decay(pow(LEVEL_GAIN_CURVE,Level), 15))		//was decay(()), 12)
	vCost: 0.000001 * decay(pow(LEVEL_GAIN_CURVE,Level), 12) * decay(Size, 30)
	vHeatsink: Size * 40
	vHeatReleaseRate: Size * 2 * (2 - decay(pow(LEVEL_GAIN_CURVE,Level), 5))
	vAntimatterGeneration: Size * 8												//Size * 3 * (2 - decay(pow(LEVEL_GAIN_CURVE,Level), 35))
	
	Provides: Power with
		Rate[vGen],
		Cost[vCost] //Larger power generators tend to be more efficient

	Provides: Capacitance with
		Amount[vGen * 2.5]
		
	Provides: Heatsink with Amount[vHeatsink]
	Provides: ReleaseHeat with Rate[vHeatReleaseRate]
	Provides: AntimatterGeneration with Amount[vAntimatterGeneration]
	
	Provides: PowerOrBoom
	
	Triggerable: Detonation: ShipExplosion with Damage[2 * vGen * GAME_DAMAGE_MULT], Accuracy[0.75], Range[sqrt(Size) * 15]

	Requires:
		To Run: Control[15 * Size]
	
	//Multiply by 1.8 to approximate charge rate at 20% of max charge
	Hints: Power[1.8 * vGen], FuelUse[-1.8 * vGen * vCost], Local/SelfDestruct[2 * vGen * GAME_DAMAGE_MULT], Local/NovaRange[sqrt(Size) * 15], Charge[vGen * 2.5], Heatsink[vHeatsink], WasteHeat[-1 * vHeatReleaseRate], AntimatterGeneration[vAntimatterGeneration]
	
System: ShieldedAntimatterGen
	Name: #SS_SHIELDEDANTIMATGEN_NAME
	Description: #SS_SHIELDEDANTIMATGEN_DESC
	Appearance: ShieldedAntimatterGen
	Explosion: antimatter_boom2 centered lasting 0.5
	
	Tags: Power, AntimatterPowered, ThermalManagement
	Tied To: EnergyPhysics 10, Science 9, Shields 9

	Available: (((Techs.EnergyPhysics.Level > 9) && (Techs.Science.Level > 8) && (Techs.Shields.Level > 8)) || Traits.remnants) && not(Traits.no_antimatter)
	Level: Techs.EnergyPhysics.Level
	Size: max(1, Scale)
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 40 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 240 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)

	Costs: Metals[300 * Size * pow(SUBS_COST_CRV, Level)], Electronics[300 * Size * pow(SUBS_COST_CRV, Level)], AdvParts[400 * Size * pow(SUBS_COST_CRV, Level)], Labr[8 * Size]
	Complexity: 5
	
	vGen: Size * 400 * (2 - decay(pow(LEVEL_GAIN_CURVE,Level), 15))		//was decay(()), 12)
	vCost: 0.000001 * decay(pow(LEVEL_GAIN_CURVE,Level), 12) * decay(Size, 30)
	vHeatsink: Size * 30
	vHeatReleaseRate: Size * 1.5 * (2 - decay(pow(LEVEL_GAIN_CURVE,Level), 5))
	vAntimatterGeneration: Size * 8												//Size * 3 * (2 - decay(pow(LEVEL_GAIN_CURVE,Level), 35))
	
	Provides: Power with
		Rate[vGen],
		Cost[vCost] //Larger power generators tend to be more efficient

	Provides: Capacitance with
		Amount[vGen * 2.5]
		
	Provides: Heatsink with Amount[vHeatsink]
	Provides: ReleaseHeat with Rate[vHeatReleaseRate]
	Provides: AntimatterGeneration with Amount[vAntimatterGeneration]
	
	Requires:
		To Run: Control[30 * Size]
	
	//Multiply by 1.8 to approximate charge rate at 20% of max charge
	Hints: Power[1.8 * vGen], FuelUse[-1.8 * vGen * vCost], Charge[vGen * 2.5], Heatsink[vHeatsink], WasteHeat[-1 * vHeatReleaseRate], AntimatterGeneration[vAntimatterGeneration]
	
System: ZeroPointGenerator
	Name: #SS_ZEROPOINTGEN_NAME
	Description: #SS_ZEROPOINTGEN_DESC
	Appearance: ZeroPointGenerator
	Explosion: subsys_powerexplode lasting 1.25
	
	Tags: Power, ThermalManagement
	Tied To: EnergyPhysics 8, WarpPhysics 9

	Available: ((Techs.EnergyPhysics.Level > 7) && (Techs.WarpPhysics.Level > 8)) || Traits.remnants
	Level: floor((Techs.EnergyPhysics.Level + Techs.WarpPhysics.Level) / 2)
	Size: Scale * 2
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 65 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 200 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)

	Costs: Metals[300 * Size * pow(SUBS_COST_CRV, Level)], Electronics[200 * Size * pow(SUBS_COST_CRV, Level)], AdvParts[350 * Size * pow(SUBS_COST_CRV, Level)], Labr[6 * Size]
	Complexity: 4
	
	vGen: Size * 200 * (2 - decay(pow(LEVEL_GAIN_CURVE,Level), 15))		//was decay(()), 12)
	vCost: 0
	vHeatsink: Size * 50
	vHeatReleaseRate: Size * 2.5 * (2 - decay(pow(LEVEL_GAIN_CURVE,Level), 5))

	Provides: Power with
		Rate[vGen],
		Cost[vCost] //Larger power generators tend to be more efficient

	Provides: Capacitance with
		Amount[vGen * 2.5]
		
	Provides: Heatsink with Amount[vHeatsink]
	Provides: ReleaseHeat with Rate[vHeatReleaseRate]
	
	Requires:
		To Run: Control[25 * Size]
	
	Hints: Power[1.8 * vGen], FuelUse[0], Charge[vGen * 2.5], Heatsink[vHeatsink], WasteHeat[-1 * vHeatReleaseRate]
	
System: SolarPowerGen
	Name: #SS_SOLARPANELS_NAME
	Description: #SS_SOLARPANELS_DESC
	Appearance: SolarPanel
	Explosion: subsystem_destroyed
	
	Tags: Power
	Tied To: EnergyPhysics 1


	Available: Techs.EnergyPhysics.Level > 0
	Level: Techs.EnergyPhysics.Level
	Size: Scale
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 15 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 40 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)
	
	Costs: Metals[50 * Size * pow(SUBS_COST_CRV, Level)], Electronics[30 * Size * pow(SUBS_COST_CRV, Level)], Labr[5 * Size]
	Complexity: 0.5
	
	vGenFactor: 50
	vEfficiency: min((2.0 * pow(LEVEL_GAIN_CURVE, Level)), 7)		//was 1.3 * pow
	vCharge: Size * 100 * pow(LEVEL_GAIN_CURVE, Level)

	Provides: SolarPower with
		Efficiency[vEfficiency],
		SurfaceArea[Size * vGenFactor]
		
	Provides: Capacitance with
		Amount[vCharge]

	Requires: External
	
	Hints: Power[vEfficiency * vGenFactor * Size * 0.1], Charge[vCharge]


System: Capacitor
	Name: #SS_CAPACITOR_NAME
	Description: #SS_CAPACITOR_DESC
	Appearance: Capacitor
	Explosion: electrical_spark
	
	Tags: Power, Storage:Power
	Tied To: EnergyPhysics 1

	Available: Techs.EnergyPhysics.Level > 0
	Level: Techs.EnergyPhysics.Level
	Size: Scale
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 100 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 50 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)
	
	Costs: Metals[100 * Size * pow(SUBS_COST_CRV, Level)], Labr[2 * Size]
	Complexity: 0.6
	
	Tick Rate: 1
	
	vCharge: Size * 1000 * pow(LEVEL_GAIN_CURVE, Level)
	
	Provides: Capacitance with
		Amount[vCharge]
	
	Hints: Charge[vCharge]

System: QuantumBattery
	Name: #SS_ZPM_NAME
	Description: #SS_ZPM_DESC
	Appearance: QuantumBattery
	Explosion: electrical_spark
	
	Tags: Power, Storage:Power
	Tied To: EnergyPhysics 10, WarpPhysics 8

	Available: ((Techs.EnergyPhysics.Level >= 10) && (Techs.WarpPhysics.Level >= 8)) || Traits.remnants
	Level: floor(weight(Techs.WarpPhysics.Level, 0.5, Techs.EnergyPhysics.Level, 0.5))
	Size: Scale
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 60 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 40 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)
	
	Costs: Metals[50 * Size * pow(SUBS_COST_CRV, Level)], Electronics[150 * Size * pow(SUBS_COST_CRV, Level)], AdvParts[250 * Size * pow(SUBS_COST_CRV, Level)], Labr[2 * Size]
	Complexity: 3	

	Tick Rate: 1
	vCharge: Size * 10000 * pow(LEVEL_GAIN_CURVE, Level)
	
	Provides: Capacitance with
		Amount[vCharge]

	Requires:
		To Run:
			Control[20 * Size]
	
	Hints: Charge[vCharge]

System: RamScoop
	Name: #SS_RAMSCOOP_NAME
	Description: #SS_RAMSCOOP_DESC
	Appearance: BussardRamscoop
	Explosion: subsystem_destroyed
	
	Tags: Support
	Tied To: ParticlePhysics 1

	Available: Techs.ParticlePhysics.Level > 0
	Level: Techs.ParticlePhysics.Level
	Size: max(Scale, 1)
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 50 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 50 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)
	
	Costs: Metals[150 * Size * pow(SUBS_COST_CRV, Level)], Electronics[10 * Size * pow(SUBS_COST_CRV, Level)], AdvParts[10 * Size * pow(SUBS_COST_CRV, Level)], Labr[5 * Size], Fuel[Size * 10 * pow(LEVEL_GAIN_CURVE, Level)]
	Complexity: 1
	
	Tick Rate: 2
	
	vFuelRate: Size * 0.01 * pow(LEVEL_GAIN_CURVE, Level)
	vFuelStore: Size * 10 * (4 - decay(pow(LEVEL_GAIN_CURVE, Level), 25) - decay(pow(LEVEL_GAIN_CURVE, Level), 125) - decay(pow(LEVEL_GAIN_CURVE, Level), 625))
	
	Provides: FuelStorage with
		Amount[vFuelStore]
	
	Provides: CollectFuel with
		Rate[vFuelRate]
	
	Hints: FuelUse[vFuelRate], Fuel[vFuelStore]

System: ShipBay
	Name: #SS_SHIPBAY_NAME
	Description: #SS_SHIPBAY_DESC
	Appearance: ShipBay
	Explosion: subsystem_destroyed
	
	Tags: ShipBay, Restrict:CarrierHull, Storage
	Tied To: ShipConstruction 1
	
	Available: Techs.ShipConstruction.Level > 0
	Level: floor((Techs.Cargo.Level / 2) + (Techs.ShipConstruction.Level / 2))
	Size: Scale
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 5 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 5 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)

	Costs: Metals[20 * Size * pow(SUBS_COST_CRV, Level)], Electronics[5 * Size * pow(SUBS_COST_CRV, Level)], AdvParts[1 * Size * pow(SUBS_COST_CRV, Level)], Labr[5 * Size]
	Complexity: 0.5
	
	Tick Rate: 1

	vShipBay: Size * (1 / 20) * 1.01								//was ((Size * (1 / 32) * (2 - decay(pow(LEVEL_GAIN_CURVE,Level), 12))
	
	Provides: ShipStorage with
		Amount[vShipBay]

	Hints: ShipBay[vShipBay] //Divide by space taken by a scale 1 ship

System: LifeSupport
	Appearance: LifeSupport
	
	Name: #SS_LIFESUPPORT_NAME
	Description: #SS_LIFESUPPORT_DESC
	Explosion: vent_gas
	
	Tags: Control
	Tied To: ShipSystems 1
	
	Available: Techs.ShipSystems.Level > 0
	Level: Techs.ShipSystems.Level
	Size: Scale
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 20 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 50 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)

	Costs: Metals[150 * Size * pow(SUBS_COST_CRV, Level)], Electronics[200 * Size * pow(SUBS_COST_CRV, Level)], AdvParts[10 * Size * pow(SUBS_COST_CRV, Level)], Labr[5 * Size]
	Complexity: 1
	
	Tick Rate: 4
	
	vAirGen: 5 * Size * pow(LEVEL_GAIN_CURVE, Level)
	
	Provides: MakeAir with Amount[vAirGen]
	Provides: AirStorage with Amount[progress(50,10,Level) * Size]

	Consumes:
		To Run: Power[10 * Size]
	
	Hints: Air[vAirGen]

System: CrewQuarters
	Appearance: CrewQuarters
	Name: #SS_CREWQUARTERS_NAME
	Description: #SS_CREWQUARTERS_DESC
	Explosion: subsystem_destroyed
	
	Tags: Control
	Tied To: ShipSystems 1
	
	Available: Techs.ShipSystems.Level > 0 && not(Traits.automated)
	Level: Techs.ShipSystems.Level
	Size: Scale
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 20 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 30 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)

	Costs: Metals[200 * Size * pow(SUBS_COST_CRV, Level)], Electronics[20 * Size * pow(SUBS_COST_CRV, Level)], Labr[5 * Size]
	Complexity: 0.75
	
	Tick Rate: 4
	
	vCrewStore: ceil(25 * Size)
	vCrewRegen: Size * 2.5 * pow(LEVEL_GAIN_CURVE, Level)			//was Size * 2.0
				
	//vMetalCost: Size * 0.001 * pow(LEVEL_GAIN_CURVE, Level)   	//for now only metal cost, but others possible
	vMetalCost: Size * 0.1 * * max((Level / 2), 1)					//wasSize * 0.1 * pow(LEVEL_GAIN_CURVE, Level) * (2 - decay(pow(LEVEL_GAIN_CURVE,Level),35))
	
	Provides: CrewQuarters with Amount[vCrewStore], Regen[vCrewStore * 0.01]
	
	Provides: DelayedRepairManpower with
		Rate[vCrewRegen], MetalCost[vMetalCost]
		
	Provides: HasDelRepair with Amount[1]

	Consumes:
		To Run:
			Power[2 * Size], Air[1 * Size]
	
	Hints: Crew[vCrewStore], Regen[vCrewRegen], RegenCost[-1 * vMetalCost]

System: Bridge
	Name: #SS_BRIDGE_NAME
	Description: #SS_BRIDGE_DESC
	Appearance: Bridge	
	Explosion: subsystem_destroyed

	Tags: Control
	Tied To: ShipSystems 1
	
	Available: Techs.ShipSystems.Level > 0 && not(Traits.automated)
	Level: Techs.ShipSystems.Level
	Size: Scale	
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 50 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 30 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)
	
	Costs: Metals[100 * Size * pow(SUBS_COST_CRV, Level)], Electronics[125 * Size * pow(SUBS_COST_CRV, Level)], AdvParts[10 * Size * pow(SUBS_COST_CRV, Level)], Labr[5 * Size]
	Complexity: 4
	
	Tick Rate: 4
	
	vCrewReq: ceil(5 * Size * (1 + decay(pow(LEVEL_GAIN_CURVE,Level),20)))													//was ceil(5 * Size * (2 - decay(pow(LEVEL_GAIN_CURVE,Level),40)))
	vControlGen: 100 * Size * pow(LEVEL_GAIN_CURVE, (1 + (Level / 2)))
	
	Provides: Control with
		Amount[vControlGen]
	
	Requires:
		To Run: Crew[vCrewReq]
	
	Consumes:
		To Run: Power[2 * Size]
	
	Hints: Control[vControlGen], Crew[vCrewReq * -1]

System: Cockpit
	Name: #SS_COCKPIT_NAME
	Description: #SS_COCKPIT_DESC
	Appearance: Cockpit
	Explosion: subsystem_destroyed

	Tags: Control, Require:FighterBomber
	Tied To: ShipSystems 1
	
	Available: Techs.ShipSystems.Level > 0 && not(Traits.automated)
	Level: Techs.ShipSystems.Level
	Size: Scale	
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 50 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 30 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)
	
	Costs: Metals[100 * Size * pow(SUBS_COST_CRV, Level)], Electronics[125 * Size * pow(SUBS_COST_CRV, Level)], AdvParts[10 * Size * pow(SUBS_COST_CRV, Level)], Labr[5 * Size]
	Complexity: 3
	
	Tick Rate: 4
	
	vControlGen: 80 * Size * pow(LEVEL_GAIN_CURVE, Level)
	
	Provides: Control with
		Amount[vControlGen]

	Consumes:
		To Run: Power[2 * Size]
		
	Hints: Control[vControlGen]

System: IntegratedCommandCenter
	Name: #SS_ICC_NAME
	Description: #SS_ICC_DESC
	Appearance: IntegratedCommandCenter
	Explosion: subsystem_destroyed

	Tags: Control
	Tied To: ShipSystems 7
	
	Available: ((Techs.ShipSystems.Level > 6) || Traits.remnants) && not(Traits.automated)
	Level: Techs.ShipSystems.Level
	Size: Scale	* 2
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 70 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 30 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)
	
	Costs: Metals[100 * Size * pow(SUBS_COST_CRV, Level)], Electronics[125 * Size * pow(SUBS_COST_CRV, Level)], AdvParts[10 * Size * pow(SUBS_COST_CRV, Level)], Labr[5 * Size]
	Complexity: 4
	
	Tick Rate: 4
	
	vControlGen: 80 * Size * pow(LEVEL_GAIN_CURVE, (1 + (Level / 2)))
	vCrewStore: ceil(5 * Size)
	vCrewRegen: Size * 2.0 * pow(LEVEL_GAIN_CURVE, Level)			//was Size * 1.0
	vAirGen: 1 * Size * pow(LEVEL_GAIN_CURVE, Level)
	
	vMetalCost: Size * 0.1 * * max((Level / 2), 1)					//was Size * 0.1 * pow(LEVEL_GAIN_CURVE, Level) * (2 - decay(pow(LEVEL_GAIN_CURVE,Level),35))   //for now only metal cost, but others possible
	
	Provides: Control with
		Amount[vControlGen]
	
	Provides: CrewQuarters with Amount[vCrewStore], Regen[vCrewStore * 0.01]
	
	Provides: DelayedRepairManpower with
		Rate[vCrewRegen], MetalCost[vMetalCost]
		
	Provides: HasDelRepair with Amount[1]

	Provides: MakeAir with Amount[vAirGen]
	Provides: AirStorage with Amount[progress(50,10,Level) * Size]
	
	Consumes:
		To Run:
			Power[10 * Size]
	
	Hints: Crew[vCrewStore], Regen[vCrewRegen], Control[vControlGen], Air[vAirGen], RegenCost[-1 * vMetalCost]
	
System: Computer
	Name: #SS_COMPUTER_NAME
	Description: #SS_COMPUTER_DESC
	Appearance: CPU
	Explosion: subsystem_destroyed
	
	Tags: Control
	Tied To: Computers 1

	Available: ((Techs.Computers.Level > 0) || Traits.remnants) && not(Traits.no_computers)
	Level: Techs.Computers.Level
	Size: Scale	
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 20 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 75 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)
	
	Costs: Metals[50 * Size * pow(SUBS_COST_CRV, Level)], Electronics[400 * Size * pow(SUBS_COST_CRV, Level)], AdvParts[30 * Size * pow(SUBS_COST_CRV, Level)], Labr[5 * Size]
	Complexity: 6
	
	Tick Rate: 4
	
	vComputerControlGen: Size * 50 * pow(LEVEL_GAIN_CURVE, (1 + (Level / 2)))
	
	Provides: Control with
		Amount[vComputerControlGen]
	
	Consumes:
		To Run: Power[20 * Size]
	
	Hints: Control[vComputerControlGen]

System: AdvancedAICore
	Name: #SS_ADVAICORE_NAME
	Description: #SS_ADVAICORE_DESC
	Appearance: AdvancedAICore
	Explosion: subsystem_destroyed
	
	Tags: BoardingDefense, Control, NoBonusHealth
	Tied To: Computers 11

	Available: ((Techs.Computers.Level > 10) || Traits.remnants) && not(Traits.no_computers)
	Level: Techs.Computers.Level
	Size: Scale	* 2
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 5 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 120 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)
	
	Costs: Metals[100 * Size * pow(SUBS_COST_CRV, Level)], Electronics[400 * Size * pow(SUBS_COST_CRV, Level)], AdvParts[60 * Size * pow(SUBS_COST_CRV, Level)], Labr[5 * Size]
	Complexity: 10
	
	Tick Rate: 4
	
	vComputerControlGen: Size * 120 * pow(LEVEL_GAIN_CURVE, (1 + (Level / 2)))
											//was vCrewStore: ceil(10 * Size)
	
	Provides: Control with
		Amount[vComputerControlGen]
		
											//was Provides: CrewQuarters with Amount[vCrewStore], Regen[vCrewStore * 0.02]
	
	Consumes:
		To Run: Power[50 * Size]
	
	Hints: Control[vComputerControlGen], BoardingDefense[Durability]								//was Crew[vCrewStore]

System: RepairBay
	Name: #SS_REPAIRBAY_NAME
	Description: #SS_REPAIRBAY_DESC
	Appearance: RepairBay
	Explosion: subsystem_destroyed

	Tags: Support
	Tied To: ShipSystems 1
	
	Available: Techs.ShipSystems.Level > 0
	Level: Techs.ShipSystems.Level		//was ceil(weight(Techs.ShipSystems.Level, 1/4, Techs.Metallurgy.Level, 1))
	Size: Scale
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 50 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 150 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)
	
	Costs: Metals[250 * Size * pow(SUBS_COST_CRV, Level)], Electronics[50 * Size * pow(SUBS_COST_CRV, Level)], AdvParts[50 * Size * pow(SUBS_COST_CRV, Level)], Labr[5 * Size]
	Complexity: 2.5
	
	Tick Rate: 1							//was 1
	
	vRepair: Size * 15.0 * pow(LEVEL_GAIN_CURVE, Level)		//was Size * 12
	vMetalCost: Size * 0.5 * max((Level / 2), 1)																//was Size * 0.5 * pow(LEVEL_GAIN_CURVE, Level) * (1 + decay(pow(LEVEL_GAIN_CURVE,Level),35))
	
	Provides: DelayedRepairManpower with
		Rate[vRepair], MetalCost[vMetalCost]
		
	Provides: HasDelRepair with Amount[1]

	Requires:
		To Run: Control[20 * Size]

	Hints: Regen[vRepair], RegenCost[-1 * vMetalCost]

System: NaniteRepair
	Name: #SS_NANITEREPUNIT_NAME
	Description: #SS_NANITEREPUNIT_DESC
	Appearance: NaniteRepair
	Explosion: subsystem_destroyed

	Tags: Support
	Tied To: Nanotech 10, Chemistry 8
	
	Available: (((Techs.Nanotech.Level > 9) && (Techs.Chemistry.Level > 7)) || Traits.remnants) && not(Traits.no_nanotech)
	Level: floor(weight(Techs.Nanotech.Level, 0.7, Techs.Chemistry.Level, 0.3))
	Size: Scale
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 15 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 150 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)
	
	Costs: Metals[100 * Size * pow(SUBS_COST_CRV, Level)], Electronics[200 * Size * pow(SUBS_COST_CRV, Level)], AdvParts[300 * Size * pow(SUBS_COST_CRV, Level)], Labr[5 * Size]
	Complexity: 4.0

	Tick Rate: 1
	
	vRepair: Size * 10.0 * pow(LEVEL_GAIN_CURVE, Level)		//was Size * 16.0
	vMetalCost: Size * 1.0 * max((Level / 2), 1)			//was Size * 1.0 * pow(LEVEL_GAIN_CURVE, Level) * (1 + decay(pow(LEVEL_GAIN_CURVE,Level),35))
	
	Provides: RepairMachines with
		Rate[vRepair], MetalCost[vMetalCost]
		
	Provides: HasRepair with Amount[1]

	Requires:
		To Run: Control[60 * Size]

	Consumes:
		To Run: Power[200 * Size]

	Hints: Regen[vRepair], RegenCost[-1 * vMetalCost]

System: Colonizer
	Name: #SS_COLONIZER_NAME
	Description: #SS_COLONIZER_DESC
	Appearance: ColonyModule
	Explosion: subsystem_destroyed

	Tags: Colonizer, Tool:Colonizer, Order:Colonize   //Tool
	Tied To: ShipSystems 1
	
	Available: Techs.ShipSystems.Level > 0
	Level: Techs.ShipSystems.Level
	Size: max(Scale,15)
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 100 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 80 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)
	
	Costs: Metals[50 * Size * pow(SUBS_COST_CRV, Level)], Electronics[12 * Size * pow(SUBS_COST_CRV, Level)], AdvParts[12 * Size * pow(SUBS_COST_CRV, Level)]
	Complexity: 1.5
	
	vStructures: Size / 15
	
	Tick Rate: 4
	
	Provides: TakePlanet
	Provides: MakeStructures with Amount[vStructures]

	Consumes:
		To Run: Air[5 * Size * 0.99]
	
	Hints: Local/AddStructs[vStructures]
	
System: RepairTool
	Name: #SS_REPAIRTOOL_NAME
	Description: #SS_REPAIRTOOL_DESC
	Appearance: Repairtool
	Explosion: subsystem_destroyed
	
	Tags: Repairer, Support, Work:Repairer, Tool:Repairer, TimedReload						//Restrict:Weapon, Tool
	Tied To: Materials 1
	
	Available: Techs.Materials.Level > 0
	Level: Techs.Materials.Level
	Size: Scale
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 100 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 80 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)
	
	Costs: Metals[80 * Size * pow(SUBS_COST_CRV, Level)], Electronics[30 * Size * pow(SUBS_COST_CRV, Level)], AdvParts[50 * Size * pow(SUBS_COST_CRV, Level)]
	Complexity: 2
	
	Tick Rate: 10
	
	vRemoteRep: Size * 5 * pow(LEVEL_GAIN_CURVE, Level)		//was size * 5
	vMetalCost: Size * 0.5 * max((Level / 2), 1)			//was Size * 0.5 * pow(LEVEL_GAIN_CURVE, Level) * (1 + decay(pow(LEVEL_GAIN_CURVE,Level),35))
	
	Provides: RepairTool with RepairRate[vRemoteRep], MetalCost[vMetalCost]

	Requires:
		To Run:
			Control[10 * Size]
	
	Hints: RepOther[vRemoteRep], RegenCost[-1 * vMetalCost] 

System: RepairFacilities
	Name: #SS_REPAIRFACILITIES_NAME
	Description: #SS_REPAIRFACILITIES_DESC
	Appearance: RepairFacilities
	Explosion: subsystem_destroyed
	
	Tags: RepairFacs, Support, Work:RepairFacs, Tool:RepairFacs, Require:StationOrCarrier, TimedReload    //Tool
	Tied To: Materials 1, ShipSystems 1
	
	Available: (Techs.Materials.Level) > 0 && (Techs.ShipSystems.Level > 0) || Traits.remnants
	Level: floor((Techs.ShipSystems.Level / 2) + (Techs.Materials.Level / 2))
	Size: Scale
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 125 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 300 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)
	
	Costs: Metals[400 * Size * pow(SUBS_COST_CRV, Level)], Electronics[200 * Size * pow(SUBS_COST_CRV, Level)], AdvParts[100 * Size * pow(SUBS_COST_CRV, Level)]
	Complexity: 5
	
	Tick Rate: 10
	
	vRemoteRep: Size * 12 * pow(LEVEL_GAIN_CURVE, Level)		//was size * 5
	vMetalCost: Size * 0.5 * max((Level / 2), 1)				//was Size * 0.5 * pow(LEVEL_GAIN_CURVE, Level) * (1 + decay(pow(LEVEL_GAIN_CURVE,Level),35))
	
	Provides: RepairFacilities with RepairRate[vRemoteRep], MetalCost[vMetalCost]

	Requires:
		To Run:
			Control[40 * Size]
	
	Hints: RepOther[vRemoteRep], RegenCost[-1 * vMetalCost]
	
System: Salvager
	Name: #SS_SALVAGER_NAME
	Description: #SS_SALVAGER_DESC
	Appearance: Salvager
	Explosion: subsystem_destroyed
	
	Tags: Salvager, Work:Salvager, Tool:Salvager, Deposit:Metals, TimedReload      //Tool
	Tied To: Materials 1
	
	Available: (Techs.Materials.Level > 0) && not(Traits.code_of_honor)
	Level: Techs.Materials.Level
	Size: Scale
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 100 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 80 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)
	
	Costs: Metals[50 * Size * pow(SUBS_COST_CRV, Level)], Electronics[50 * Size * pow(SUBS_COST_CRV, Level)], AdvParts[75 * Size * pow(SUBS_COST_CRV, Level)]
	Complexity: 2.5
	
	Tick Rate: 10
	
	Provides: Salvager with Rate[Size * 10 * pow(LEVEL_GAIN_CURVE, Level)], Factor[1 - (0.75 * decay(pow(LEVEL_GAIN_CURVE,Level), 12))], Delay[10], Duration[5]

	Requires:
		To Run:
			Control[10 * Size]

	Hints: Salvage[(Size * 10 * pow(LEVEL_GAIN_CURVE, Level) * 5)/10]

System: Analyzer
	Name: #SS_ANALYZER_NAME
	Description: #SS_ANALYZER_DESC
	Appearance: Analyzer
	Explosion: subsystem_destroyed
	
	Tags: Analyzer, Work:Analyzer, Tool:Analyzer, TimedReload					//was Anaylzer (wrong spelling), Tool
	Tied To: Science 1, Sensors 0
	
	Available: (Techs.Science.Level > 0)
	Level: ceil(weight(Techs.Science.Level,0.25, Techs.Sensors.Level, 0.75))
	Size: Scale
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 50 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 60 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)
	
	Costs: Metals[40 * Size * pow(SUBS_COST_CRV, Level)], Electronics[75 * Size * pow(SUBS_COST_CRV, Level)], AdvParts[100 * Size * pow(SUBS_COST_CRV, Level)]
	Complexity: 2.5
	
	Tick Rate: 10
	
	vSizeImpact: 0.5 + (0.5 * Object.Scale/Scale)
	vTechImpact: if(Techs.Sensors.Level > 0, 1, 0.5)
	vLevelImpact: 0.48 * (1 - decay(pow(LEVEL_GAIN_CURVE, Level),150))
	
	vAnalyzeChance: vTechImpact * ( 0.02 + vLevelImpact )^vSizeImpact
	vPowCost: Size * 15 * decay(pow(LEVEL_GAIN_CURVE,Level),125)
	
	Provides: Analyzer with ScanQuality[vAnalyzeChance], PowCost[vPowCost], Delay[10], Duration[5], Range[35 + pow(Object.Size,0.3)]

	Requires:
		To Run:
			Control[30 * Size]
	
	Hints: Local/AnalysisChance[100 * (1 - (1 - vAnalyzeChance)^5)], Power[-1 * vPowCost * 5 / 10]

System: MatterGen
	Name: #SS_MATTERGEN_NAME
	Description: #SS_MATTERGEN_DESC
	Appearance: MatterGenerator
	Explosion: subsystem_destroyed

	Tags: Support
	Tied To: ParticlePhysics 13, EnergyPhysics 11

	Available: ((Techs.ParticlePhysics.Level >= 13) && (Techs.EnergyPhysics.Level >= 11)) || Traits.remnants
	Level: floor(weight(Techs.ParticlePhysics.Level, 0.8, Techs.EnergyPhysics.Level, 0.2))
	Size: Scale
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 40 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 60 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)

	Costs: Metals[200 * Size * pow(SUBS_COST_CRV, Level)], Electronics[100 * Size * pow(SUBS_COST_CRV, Level)], AdvParts[100 * Size * pow(SUBS_COST_CRV, Level)], Fuel[Size * 10], Ammo[Size * 10]

	vMatterRate: Size * (5 - (3 * decay(pow(LEVEL_GAIN_CURVE,Level), 25)))				//was Size * (8 - (4 * ...
	vPowCost: Size * 200 * decay(pow(LEVEL_GAIN_CURVE,Level),125)							//was Size * 40
	vStorage: Size * 10 * (4 - decay(pow(LEVEL_GAIN_CURVE, Level), 25) - decay(pow(LEVEL_GAIN_CURVE, Level), 125) - decay(pow(LEVEL_GAIN_CURVE, Level), 625))

	Provides: AmmoStorage with
		Amount[vStorage]

	Provides: FuelStorage with
		Amount[vStorage]
	
	Provides: MatterGeneration with Rate[vMatterRate], PowCost[vPowCost]

	Requires:
		To Run:
			Control[100 * Size]																//was 10 * Size

	Hints: Power[-1 * vPowCost], Local/MatterGen[vMatterRate], FuelUse[vMatterRate / 2], AmmoUse[vMatterRate / 2]
	
System: Heatsink
	Name: #SS_HEATSINK_NAME
	Description: #SS_HEATSINK_DESC
	Appearance: Heatsink
	Explosion: subsys_powerexplode lasting 0.5
	
	Tags: Support, ThermalManagement
	Tied To: EnergyPhysics 1

	Available: Techs.EnergyPhysics.Level > 0
	Level: Techs.EnergyPhysics.Level
	Size: Scale
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 50 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 20 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)

	Costs: Metals[100 * Size * pow(SUBS_COST_CRV, Level)], Electronics[5 * Size * pow(SUBS_COST_CRV, Level)], Labr[5 * Size]
	Complexity: 0.6
	
	vHeatsink: Size * 20
	vHeatReleaseRate: Size * 4 * (2 - decay(pow(LEVEL_GAIN_CURVE,Level), 5))
		
	Provides: Heatsink with Amount[vHeatsink]
	Provides: ReleaseHeat with Rate[vHeatReleaseRate]

	Requires:
		To Run: Control[4 * Size]
	
	Hints: Heatsink[vHeatsink], WasteHeat[-1 * vHeatReleaseRate]

System: AMConverter
	Name: #SS_AMCONV_NAME
	Description: #SS_AMCONV_DESC
	Appearance: AMConverter
	Explosion: subsys_powerexplode lasting 0.5
	
	Tags: Support, ThermalManagement
	Tied To: EnergyPhysics 11, Science 8

	Available: (Techs.EnergyPhysics.Level > 10) && (Techs.Science.Level > 7)
	Level: Techs.EnergyPhysics.Level
	Size: Scale
	HPLevel: Techs.Materials.Level-1 As Level
	Durability: GAME_SUBSYS_MULT * 50 * Size * pow(HEALTH_CURVE,HPLevel)
	Mass: 20 * Size * max((1 - (0.01 * (floor((Techs.Metallurgy.Level / 3) + (Techs.ShipConstruction.Level / 3) + (Techs.Chemistry.Level / 3))))), 0.6)

	Costs: Metals[100 * Size * pow(SUBS_COST_CRV, Level)], Electronics[5 * Size * pow(SUBS_COST_CRV, Level)], Labr[5 * Size]
	Complexity: 0.6
	
	vAntimatterGeneration: Size * 12

	Provides: AntimatterGeneration with Amount[vAntimatterGeneration]

	Requires:
		To Run: Control[5 * Size]
	
	Hints: AntimatterGeneration[vAntimatterGeneration]